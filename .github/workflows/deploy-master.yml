name: Deploy adhocint.com (PM2 + rsync)

on:
  push:
    branches: [master]

concurrency: adhocint-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install & build
        run: |
          set -e
          npm ci
          npm run build
          echo "${GITHUB_SHA} $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > version.txt

      - name: Prepare standalone bundle
        run: |
          set -e
          rm -rf out_standalone
          mkdir -p out_standalone/.next
          # Next.js "standalone" output
          cp -r .next/standalone/* out_standalone/
          # Static assets
          cp -r .next/static out_standalone/.next/static
          # Public assets (if any)
          [ -d public ] && cp -r public out_standalone/public
          # Version marker (helps verify live version)
          cp version.txt out_standalone/

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Upload release via rsync
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -e
          RSYNC_DEST="/var/www/adhocint.com/releases/${{ github.sha }}/"
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=accept-new" \
            out_standalone/ "${SSH_USER}@${SSH_HOST}:${RSYNC_DEST}"

      - name: Activate release + PM2 restart (and prune)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            SITE=/var/www/adhocint.com
            REL="$SITE/releases/${{ github.sha }}"
            CUR="$SITE/current"
            SHARED="$SITE/shared"

            # Require runtime env file on server
            if [ ! -f "$SHARED/.env.local" ]; then
              echo "❌ Missing $SHARED/.env.local on server."
              echo "Create it with PORT=3001 (no quotes/spaces) and your secrets."
              exit 1
            fi

            # Link runtime env into this release (do NOT commit it to git)
            ln -sfn "$SHARED/.env.local" "$REL/.env.local"

            # Optional persistent uploads dir
            if [ -d "$SHARED/uploads" ]; then
              rm -rf "$REL/uploads"
              ln -sfn "$SHARED/uploads" "$REL/uploads"
            fi

            # Sanity: entrypoint must exist (Next standalone)
            if [ ! -f "$REL/server.js" ]; then
              echo "❌ server.js not found in $REL. Release contents:"
              ls -la "$REL"
              exit 1
            fi

            # Atomic switch to the new release
            ln -sfn "$REL" "$CUR"
            echo "current -> $(readlink -f "$CUR")"

            # Export env so PM2 inherits it (no dotenv at runtime needed)
            set -a
            . "$REL/.env.local"
            set +a
            : "${PORT:=3001}"

            # Restart PM2 bound to CURRENT (simple & robust)
            pm2 delete adhocint || true
            pm2 start "$CUR/server.js" --name adhocint --cwd "$CUR" --update-env
            pm2 save

            # Quick local health check
            curl -sfI "http://127.0.0.1:${PORT}" >/dev/null || {
              echo "❌ Health check failed on :${PORT}"
              pm2 logs adhocint --lines 80
              exit 1
            }

            # Keep only last 5 releases
            cd "$SITE/releases"
            ls -1t | tail -n +6 | xargs -r rm -rf
