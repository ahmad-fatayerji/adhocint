name: Deploy adhocint.com (PM2 + rsync)

on:
  push:
    branches: [master]

concurrency: adhocint-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install & build (standalone)
        run: |
          set -e
          npm ci
          npm run build
          echo "${GITHUB_SHA} $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > version.txt

      - name: Prepare standalone bundle  ✅ FULL .next + public
        run: |
          set -e
          rm -rf out_standalone
          mkdir -p out_standalone/.next

          # 1) Standalone runtime (server.js + minimal node_modules)
          cp -r .next/standalone/* out_standalone/

          # 2) FULL Next build (metadata + static) but skip heavy cache
          rsync -a --delete --exclude 'cache/' .next/ out_standalone/.next/

          # 3) Public assets (logo.png, heroimg.jpg, etc.)
          [ -d public ] && rsync -a public/ out_standalone/public/

          # Optional: version marker
          cp version.txt out_standalone/

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Upload release via rsync
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -e
          RSYNC_DEST="/var/www/adhocint.com/releases/${{ github.sha }}/"
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=accept-new" \
            out_standalone/ "${SSH_USER}@${SSH_HOST}:${RSYNC_DEST}"

      - name: Activate release + PM2 restart (node server.js) + wait + prune
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -eo pipefail
            SITE=/var/www/adhocint.com
            REL="$SITE/releases/${{ github.sha }}"
            CUR="$SITE/current"
            SHARED="$SITE/shared"

            [ -f "$SHARED/.env.local" ] || { echo "❌ $SHARED/.env.local missing"; exit 1; }

            ln -sfn "$SHARED/.env.local" "$REL/.env.local"
            if [ -d "$SHARED/uploads" ]; then
              rm -rf "$REL/uploads"; ln -sfn "$SHARED/uploads" "$REL/uploads"
            fi

            ln -sfn "$REL" "$CUR"
            echo "current -> $(readlink -f "$CUR")"

            # Ensure production build metadata exists
            [ -f "$CUR/.next/BUILD_ID" ] || { echo "❌ .next/BUILD_ID missing in release"; ls -la "$CUR/.next"; exit 1; }

            # Pick the entry file for the standalone server
            if [ -f "$CUR/server.js" ]; then ENTRY="$CUR/server.js";
            elif [ -f "$CUR/.next/standalone/server.js" ]; then ENTRY="$CUR/.next/standalone/server.js";
            else echo "❌ no server.js found"; ls -la "$CUR"; exit 1; fi

            # Read PORT without sourcing the file
            PORT=$(grep -E '^PORT=' "$CUR/.env.local" | tail -n1 | cut -d= -f2- || true)
            [ -n "${PORT:-}" ] || PORT=3001

            pm2 delete adhocint || true
            PORT="$PORT" HOST="127.0.0.1" NODE_ENV=production \
            pm2 start /usr/bin/node --name adhocint -- "$ENTRY"
            pm2 save

            # Wait for the app to bind then HTTP probe
            for i in $(seq 1 60); do ss -ltn | grep -q ":$PORT" && break; sleep 1; done
            ss -ltn | grep -q ":$PORT" || { echo "❌ Port :$PORT not open"; pm2 logs adhocint --lines 120; exit 1; }
            curl -sfI "http://127.0.0.1:${PORT}" >/dev/null || { echo "❌ HTTP probe failed"; pm2 logs adhocint --lines 120; exit 1; }

            # Keep last 5 releases
            cd "$SITE/releases" && ls -1t | tail -n +6 | xargs -r rm -rf || true
